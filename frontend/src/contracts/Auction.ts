/* eslint-disable */
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import {
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  CoreAppCallArgs,
  RawAppCallArgs,
  AppState,
  TealTemplateParams,
  ABIAppCallArg,
} from '@algorandfoundation/algokit-utils/types/app'
import {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import { SendTransactionResult, TransactionToSign, SendTransactionFrom } from '@algorandfoundation/algokit-utils/types/transaction'
import { Algodv2, OnApplicationComplete, Transaction, TransactionWithSigner, AtomicTransactionComposer } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "opt_into_asset(asset)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "start_auction(uint64,uint64,axfer)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "bid(pay)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim_bids()void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "claim_asset(asset,account)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "delete()void": {
      "call_config": {
        "delete_application": "CALL"
      }
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDgKcHVzaGludCAwIC8vIDAKcmV0dXJu"
  },
  "state": {
    "global": {
      "num_byte_slices": 1,
      "num_uints": 4
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 1
    }
  },
  "schema": {
    "global": {
      "declared": {
        "asa": {
          "type": "uint64",
          "key": "asa",
          "descr": "ID of the ASA being auctioned"
        },
        "asa_amt": {
          "type": "uint64",
          "key": "asa_amt",
          "descr": "Total amount of ASA being auctioned"
        },
        "auction_end": {
          "type": "uint64",
          "key": "auction_end",
          "descr": "Timestamp of the end of the auction"
        },
        "previous_bid": {
          "type": "uint64",
          "key": "previous_bid",
          "descr": "Amount of the highest bid (uALGO)"
        },
        "previous_bidder": {
          "type": "bytes",
          "key": "previous_bidder",
          "descr": "Address of the highest bidder"
        }
      },
      "reserved": {}
    },
    "local": {
      "declared": {
        "claimable_amount": {
          "type": "uint64",
          "key": "claimable_amount",
          "descr": "Amount this account can claim"
        }
      },
      "reserved": {}
    }
  },
  "contract": {
    "name": "Auction",
    "methods": [
      {
        "name": "opt_into_asset",
        "args": [
          {
            "type": "asset",
            "name": "asset"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "start_auction",
        "args": [
          {
            "type": "uint64",
            "name": "starting_price"
          },
          {
            "type": "uint64",
            "name": "length"
          },
          {
            "type": "axfer",
            "name": "axfer"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "bid",
        "args": [
          {
            "type": "pay",
            "name": "payment"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claim_bids",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "claim_asset",
        "args": [
          {
            "type": "asset",
            "name": "asset"
          },
          {
            "type": "account",
            "name": "close_to_account"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "delete",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ],
    "networks": {}
  },
  "bare_call_config": {
    "no_op": "CREATE",
    "opt_in": "CALL"
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt 
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

/**
 * Defines the types of available calls and state of the Auction smart contract.
 */
export type Auction = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'opt_into_asset(asset)void' | 'opt_into_asset', {
      argsObj: {
        asset: number | bigint
      }
      argsTuple: [asset: number | bigint]
      returns: void
    }>
    & Record<'start_auction(uint64,uint64,axfer)void' | 'start_auction', {
      argsObj: {
        starting_price: bigint | number
        length: bigint | number
        axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [starting_price: bigint | number, length: bigint | number, axfer: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'bid(pay)void' | 'bid', {
      argsObj: {
        payment: TransactionToSign | Transaction | Promise<SendTransactionResult>
      }
      argsTuple: [payment: TransactionToSign | Transaction | Promise<SendTransactionResult>]
      returns: void
    }>
    & Record<'claim_bids()void' | 'claim_bids', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'claim_asset(asset,account)void' | 'claim_asset', {
      argsObj: {
        asset: number | bigint
        close_to_account: string | Uint8Array
      }
      argsTuple: [asset: number | bigint, close_to_account: string | Uint8Array]
      returns: void
    }>
    & Record<'delete()void' | 'delete', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the global and local state of the application.
   */
  state: {
    global: {
      /**
       * ID of the ASA being auctioned
       */
      'asa'?: IntegerState
      /**
       * Total amount of ASA being auctioned
       */
      'asa_amt'?: IntegerState
      /**
       * Timestamp of the end of the auction
       */
      'auction_end'?: IntegerState
      /**
       * Amount of the highest bid (uALGO)
       */
      'previous_bid'?: IntegerState
      /**
       * Address of the highest bidder
       */
      'previous_bidder'?: BinaryState
    }
    local: {
      /**
       * Amount this account can claim
       */
      'claimable_amount'?: IntegerState
    }
  }
}
/**
 * Defines the possible abi call signatures
 */
export type AuctionSig = keyof Auction['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AuctionSig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the Auction smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AuctionSig> = Auction['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the Auction smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AuctionSig> = Auction['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AuctionCreateCalls = (typeof AuctionCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AuctionCreateCallParams =
  | (TypedCallParams<undefined> & (OnCompleteNoOp))
/**
 * A factory for available 'delete' calls
 */
export type AuctionDeleteCalls = (typeof AuctionCallFactory)['delete']
/**
 * Defines supported delete methods for this smart contract
 */
export type AuctionDeleteCallParams =
  | TypedCallParams<'delete()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type AuctionDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AuctionCreateCalls) => AuctionCreateCallParams
  /**
   * A delegate which takes a delete call factory and returns the delete call params for this smart contract
   */
  deleteCall?: (callFactory: AuctionDeleteCalls) => AuctionDeleteCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AuctionCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the Auction smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Gets available delete call factories
   */
  static get delete() {
    return {
      /**
       * Constructs a delete call for the Auction smart contract using the delete()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      delete(args: MethodArgs<'delete()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: 'delete()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available optIn call factories
   */
  static get optIn() {
    return {
      /**
       * Constructs an opt in call for the Auction smart contract using a bare call
       *
       * @param params Any parameters for the call
       * @returns A TypedCallParams object for the call
       */
      bare(params: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
        return {
          method: undefined,
          methodArgs: undefined,
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the opt_into_asset(asset)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static optIntoAsset(args: MethodArgs<'opt_into_asset(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'opt_into_asset(asset)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the start_auction(uint64,uint64,axfer)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static startAuction(args: MethodArgs<'start_auction(uint64,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'start_auction(uint64,uint64,axfer)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.starting_price, args.length, args.axfer],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the bid(pay)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static bid(args: MethodArgs<'bid(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'bid(pay)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.payment],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim_bids()void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimBids(args: MethodArgs<'claim_bids()void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim_bids()void' as const,
      methodArgs: Array.isArray(args) ? args : [],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the claim_asset(asset,account)void ABI method
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static claimAsset(args: MethodArgs<'claim_asset(asset,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'claim_asset(asset,account)void' as const,
      methodArgs: Array.isArray(args) ? args : [args.asset, args.close_to_account],
      ...params,
    }
  }
}

/**
 * A client to make calls to the Auction smart contract
 */
export class AuctionClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AuctionClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue }
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof Auction['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the Auction smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AuctionDeployArgs & AppClientDeployCoreParams = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AuctionCallFactory.create)
    const deleteArgs = params.deleteCall?.(AuctionCallFactory.delete)
    return this.appClient.deploy({
      ...params,
      deleteArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the Auction smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The create result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs & (OnCompleteNoOp) = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.create(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Gets available delete methods
   */
  public get delete() {
    const $this = this
    return {
      /**
       * Deletes an existing instance of the Auction smart contract using the delete()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The delete result
       */
      async delete(args: MethodArgs<'delete()void'>, params: AppClientCallCoreParams = {}): Promise<AppCallTransactionResultOfType<MethodReturn<'delete()void'>>> {
        return $this.mapReturnValue(await $this.appClient.delete(AuctionCallFactory.delete.delete(args, params)))
      },
    }
  }

  /**
   * Gets available optIn methods
   */
  public get optIn() {
    const $this = this
    return {
      /**
       * Opts the user into an existing instance of the Auction smart contract using a bare call.
       *
       * @param args The arguments for the bare call
       * @returns The optIn result
       */
      bare(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}): Promise<AppCallTransactionResultOfType<undefined>> {
        return $this.appClient.optIn(args) as unknown as Promise<AppCallTransactionResultOfType<undefined>>
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the Auction smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the opt_into_asset(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public optIntoAsset(args: MethodArgs<'opt_into_asset(asset)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AuctionCallFactory.optIntoAsset(args, params))
  }

  /**
   * Calls the start_auction(uint64,uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public startAuction(args: MethodArgs<'start_auction(uint64,uint64,axfer)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AuctionCallFactory.startAuction(args, params))
  }

  /**
   * Calls the bid(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public bid(args: MethodArgs<'bid(pay)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AuctionCallFactory.bid(args, params))
  }

  /**
   * Calls the claim_bids()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimBids(args: MethodArgs<'claim_bids()void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AuctionCallFactory.claimBids(args, params))
  }

  /**
   * Calls the claim_asset(asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public claimAsset(args: MethodArgs<'claim_asset(asset,account)void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AuctionCallFactory.claimAsset(args, params))
  }

  /**
   * Extracts a binary state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns A BinaryState instance containing the state value, or undefined if the key was not found
   */
  private static getBinaryState(state: AppState, key: string): BinaryState | undefined {
    const value = state[key]
    if (!value) return undefined
    if (!('valueRaw' in value))
      throw new Error(`Failed to parse state value for ${key}; received an int when expected a byte array`)
    return {
      asString(): string {
        return value.value
      },
      asByteArray(): Uint8Array {
        return value.valueRaw
      }
    }
  }

  /**
   * Extracts a integer state value out of an AppState dictionary
   *
   * @param state The state dictionary containing the state value
   * @param key The key of the state value
   * @returns An IntegerState instance containing the state value, or undefined if the key was not found
   */
  private static getIntegerState(state: AppState, key: string): IntegerState | undefined {
    const value = state[key]
    if (!value) return undefined
    if ('valueRaw' in value)
      throw new Error(`Failed to parse state value for ${key}; received a byte array when expected a number`)
    return {
      asBigInt() {
        return typeof value.value === 'bigint' ? value.value : BigInt(value.value)
      },
      asNumber(): number {
        return typeof value.value === 'bigint' ? Number(value.value) : value.value
      },
    }
  }

  /**
   * Returns the smart contract's global state wrapped in a strongly typed accessor with options to format the stored value
   */
  public async getGlobalState(): Promise<Auction['state']['global']> {
    const state = await this.appClient.getGlobalState()
    return {
      get asa() {
        return AuctionClient.getIntegerState(state, 'asa')
      },
      get asa_amt() {
        return AuctionClient.getIntegerState(state, 'asa_amt')
      },
      get auction_end() {
        return AuctionClient.getIntegerState(state, 'auction_end')
      },
      get previous_bid() {
        return AuctionClient.getIntegerState(state, 'previous_bid')
      },
      get previous_bidder() {
        return AuctionClient.getBinaryState(state, 'previous_bidder')
      },
    }
  }

  /**
   * Returns the smart contract's local state wrapped in a strongly typed accessor with options to format the stored value
   *
   * @param account The address of the account for which to read local state from
   */
  public async getLocalState(account: string | SendTransactionFrom): Promise<Auction['state']['local']> {
    const state = await this.appClient.getLocalState(account)
    return {
      get claimable_amount() {
        return AuctionClient.getIntegerState(state, 'claimable_amount')
      },
    }
  }

  public compose(): AuctionComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      optIntoAsset(args: MethodArgs<'opt_into_asset(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.optIntoAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      startAuction(args: MethodArgs<'start_auction(uint64,uint64,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.startAuction(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      bid(args: MethodArgs<'bid(pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.bid(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimBids(args: MethodArgs<'claim_bids()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimBids(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      claimAsset(args: MethodArgs<'claim_asset(asset,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.claimAsset(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get delete() {
        const $this = this
        return {
          delete(args: MethodArgs<'delete()void'>, params?: AppClientCallCoreParams) {
            promiseChain = promiseChain.then(() => client.delete.delete(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      get optIn() {
        const $this = this
        return {
          bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
            promiseChain = promiseChain.then(() => client.optIn.bare({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async execute() {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams: {} }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AuctionComposer
  }
}
export type AuctionComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the opt_into_asset(asset)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  optIntoAsset(args: MethodArgs<'opt_into_asset(asset)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AuctionComposer<[...TReturns, MethodReturn<'opt_into_asset(asset)void'>]>

  /**
   * Calls the start_auction(uint64,uint64,axfer)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  startAuction(args: MethodArgs<'start_auction(uint64,uint64,axfer)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AuctionComposer<[...TReturns, MethodReturn<'start_auction(uint64,uint64,axfer)void'>]>

  /**
   * Calls the bid(pay)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  bid(args: MethodArgs<'bid(pay)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AuctionComposer<[...TReturns, MethodReturn<'bid(pay)void'>]>

  /**
   * Calls the claim_bids()void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimBids(args: MethodArgs<'claim_bids()void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AuctionComposer<[...TReturns, MethodReturn<'claim_bids()void'>]>

  /**
   * Calls the claim_asset(asset,account)void ABI method.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  claimAsset(args: MethodArgs<'claim_asset(asset,account)void'>, params?: AppClientCallCoreParams & CoreAppCallArgs): AuctionComposer<[...TReturns, MethodReturn<'claim_asset(asset,account)void'>]>

  /**
   * Gets available delete methods
   */
  readonly delete: {
    /**
     * Deletes an existing instance of the Auction smart contract using the delete()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    delete(args: MethodArgs<'delete()void'>, params?: AppClientCallCoreParams): AuctionComposer<[...TReturns, MethodReturn<'delete()void'>]>
  }

  /**
   * Gets available optIn methods
   */
  readonly optIn: {
    /**
     * Opts the user into an existing instance of the Auction smart contract using a bare call.
     *
     * @param args The arguments for the bare call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    bare(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AuctionComposer<[...TReturns, undefined]>
  }

  /**
   * Makes a clear_state call to an existing instance of the Auction smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs): AuctionComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AuctionComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Executes the transaction group and returns an array of results
   */
  execute(): Promise<AuctionComposerResults<TReturns>>
}
export type AuctionComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
